//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EF.DatabaseFirst
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;

    //Dbctx is the primary class that is responsible for interacting 
    //with data as object. Dbctx is responsible for the following activities:
    // - EntitySet: Dbctx contains entity set(DbSet<TEntity>) for all the 
    //entities which is mapped to DB tables.
    // - Querying: Dbctx converts LINQ-to-Entities queries to SQL query 
    //and send it to the database.
    // - Change Tracking: It keeps track of changes that occurred in the entities
    //after it has been querying from the database.
    // - Persisting Data: It also performs the Insert, Update and Delete 
    //operations to the database, based on what the entity states.
    // - Caching: Dbctx does first level caching by default. It stores
    //the entities which have been retrieved during the life time of a 
    //ctx class. 
    // - Manage Relationship: Dbctx also manages relationship
    //using CSDL, MSL and SSDL in DB-First or Model-First approach or using 
    //fluent API in Code-First approach.
    //-  Object Materialization: Dbctx converts raw table data into entity objects.


    public partial class SchoolDBEntities : DbContext
    {
        public SchoolDBEntities()
            : base("name=SchoolDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<Standard> Standards { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<StudentAddress> StudentAddresses { get; set; }
        public virtual DbSet<Teacher> Teachers { get; set; }
    }
}
