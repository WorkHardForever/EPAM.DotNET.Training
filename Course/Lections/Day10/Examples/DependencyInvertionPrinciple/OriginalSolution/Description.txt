http://habrahabr.ru/post/131993/
DIP
Inversion of Control (инверсия управления) — это некий абстрактный принцип, 
набор рекомендаций для написания слабо связанного кода. Суть которого в том, 
что каждый компонент системы должен быть как можно более изолированным от других, 
не полагаясь в своей работе на детали конкретной реализации других компонентов.

Dependency Injection (внедрение зависимостей) — это одна из реализаций этого принципа
(Factory Method, Service Locator).

IoC-контейнер — это какая-то библиотека, фреймворк, которая позволяет 
упростить и автоматизировать написание кода с использованием 
данного подхода на столько, на сколько это возможно

 Жесткость

Тяжело менять систему, потому что каждое изменение затрагивает очень много 
различных ее частей.

2. Хрупкость

Когда вы вносите изменения в одну часть системы, то в неожиданном месте ломается 
другая.

3. Неподвижность

Очень сложно повторно использовать код в другом приложении, потому что модули 
сильно связаны между собой
Ссылка на статью Джеймса Ковака, который 
сделал интересную заметку:

"Выберите любой класс на бизнес-уровне, допустим InvoiceService, и просто 
скопируйте его код в новый проект. Попробуйте его скомпилировать. Скорее всего 
выяснится, что не хватает каких-то зависимостей: Invoice, InvoiceValidator и т.д. 
Скопируйте и эти классы в проект и повторите попытку. Скорее всего и на этот
раз каких-то классов система недосчитается. И когда, в конечном итоге, 
вам все же удастся скомпилировать приложение, вы обнаружите, что в новом проекте
находится добрая доля исходного кода."